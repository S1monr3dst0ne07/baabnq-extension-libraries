
use 'libs/stack.baabnq';
use 'libs/chunk.baabnq';
use 'libs/no.baabnq';



"container structure
" _p+0 -> size      :: Int
" _p+1 -> sentinel  :: Ptr

put _LinkList::Container::SIZE     = 0;
put _LinkList::Container::SENTINEL = 1;


"link structure
" _p+0 -> data :: Void 
" _p+1 -> next :: Ptr
" _p+2 -> prev :: Ptr

put _LinkList::Link::DATA = 0;
put _LinkList::Link::NEXT = 1;
put _LinkList::Link::PREV = 2;


"This module defines a circular doubley linked list, 
"which always contains a sentinel node that acts
"as the entry point for the list.

"Parameter names are not given, as this library is analogous to c++'s std::list



jump LinkList::Skip;



"=> (::Link)
lab LinkList::Link::Allocate;
lab LinkList::Link::Create;

    new 3 _pLink;
    
    put 0 -> _pLink + _LinkList::Link::DATA;
    put 0 -> _pLink + _LinkList::Link::NEXT;
    put 0 -> _pLink + _LinkList::Link::PREV;

    push _pLink;
    sub Stack::Swap;
    return;
    


"(::Link)
lab LinkList::Link::Delete;
    sub Stack::Swap; pull _pLink;

    free _pLink;
    return;



"(::Link) => (::Link)
lab LinkList::Link::Next;
    sub Stack::Swap;
    pull _pLink;

    put _pNext <- _pLink + _LinkList::Link::NEXT;

    push _pNext;
    sub Stack::Swap;
    return;

"(::Link) => (::Link)
lab LinkList::Link::Prev;
    sub Stack::Swap;
    pull _pLink;

    put _pPrev <- _pLink + _LinkList::Link::PREV;

    push _pPrev;
    sub Stack::Swap;
    return;


"(::Link) => (Data::Void)
lab LinkList::Link::Get;
    sub Stack::Swap;
    pull _pLink;

    put _data <- _pLink + _LinkList::Link::DATA;
    
    push _data;
    sub Stack::Swap;
    return;

"(::Link, Data::Void)
lab LinkList::Link::Set;
    sub Stack::Swap; pull _data;
    sub Stack::Swap; pull _pLink;

    put _data -> _pLink + _LinkList::Link::DATA;

    return;




"(Subject::Link, Position::Link)
"subject will be hooked in after position
"(that's also why position is called _pPrev)
lab LinkList::Link::Hook;
    sub Stack::Swap; pull _pPrev;
    sub Stack::Swap; pull _pSubj;
    
    "before:
    "┌──────┐              ┌──────┐
    "│      ├─────────────►│      │
    "│ Prev │              │ Next │
    "│      │◄─────────────│      │
    "└──────┘              └──────┘
    "after:
    "┌──────┐   ┌──────┐   ┌──────┐
    "│      ├──►│      ├──►│      │
    "│ Prev │   │ Subj │   │ Next │
    "│      │◄──┤      │◄──│      │
    "└──────┘   └──────┘   └──────┘
    
    "grab next node to not lose reference
    put _pNext <- _pPrev + _LinkList::Link::NEXT;

    "link prev to subj and back
    put _pSubj -> _pPrev + _LinkList::Link::NEXT;
    put _pPrev -> _pSubj + _LinkList::Link::PREV;

    "link next to subj and back
    put _pSubj -> _pNext + _LinkList::Link::PREV;
    put _pNext -> _pSubj + _LinkList::Link::NEXT;

    
    return;




"(Subject::Link)
lab LinkList::Link::Unhook;
    sub Stack::Swap; pull _pPrev;
    sub Stack::Swap; pull _pSubj;
    
    "before:
    "┌──────┐   ┌──────┐   ┌──────┐
    "│      ├──►│      ├──►│      │
    "│ Prev │   │ Subj │   │ Next │
    "│      │◄──┤      │◄──│      │
    "└──────┘   └──────┘   └──────┘
    "after:
    "┌──────┐              ┌──────┐
    "│      ├─────────────►│      │
    "│ Prev │              │ Next │
    "│      │◄─────────────│      │
    "└──────┘              └──────┘
    
    put _pNext <- _pPrev + _LinkList::Link::NEXT;

    put _pPrev -> _pNext + _LinkList::Link::PREV;
    put _pNext -> _pPrev + _LinkList::Link::NEXT;

    
    return;

















lab LinkList::Skip;

