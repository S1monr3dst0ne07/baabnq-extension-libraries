

use 'libs/stack.baabnq';
"use 'libs/no.baabnq';


sub Json::Core::ModuleInit;

jump Json::Core::Skip;

lab Json::Core::ModuleInit;
    "json type enumeration defines JsonType
    " NULL   = 0
    " TRUE   = 1
    " FLASE  = 2
    " OBJECT = 3
    " ARRAY  = 4
    " NUMBER = 5
    " STRING = 6

    put _Json::Type::NULL   = 0;
    put _Json::Type::TRUE   = 1;
    put _Json::Type::FALSE  = 2;
    put _Json::Type::OBJECT = 3;
    put _Json::Type::ARRAY  = 4;
    put _Json::Type::NUMBER = 5;
    put _Json::Type::STRING = 6;

    "json node structure defines JsonNode
    " _p+0 -> Next :: JsonNode
    " _p+1 -> Prev :: JsonNode
    " _p+2 -> Sub  :: JsonNode
    " _p+3 -> Type :: JsonType
    " _p+4 -> String :: String
    " _p+4 -> Number :: Int
    " _p+4 -> Name   :: JsonNode

    " the {String, Number, Name} âˆˆ (JsonNode)
    " members are unionized. that's why
    " they share the address _p+4.

    put _Json::Node::Next   = 0;
    put _Json::Node::Prev   = 1;
    put _Json::Node::Sub    = 2;
    put _Json::Node::Type   = 3;
    put _Json::Node::String = 4;
    put _Json::Node::Number = 4;
    put _Json::Node::Name   = 4;


    put _Json::Parse::Ptr = 0;
    put _Json::Gener::Ptr = 0;

    static ' \t\n\r' _p;
    put _Json::Const::SPACE   <- _p + 0;
    put _Json::Const::TAB     <- _p + 1;
    put _Json::Const::NEWLINE <- _p + 2;
    put _Json::Const::RETURN  <- _p + 3;

    return;


"=> (::JsonNode)
lab Json::Core::AllocateNode;
    new 5 _pNode;

    put 0 -> _pNode + 0;
    put 0 -> _pNode + 1;
    put 0 -> _pNode + 2;
    put 0 -> _pNode + 3;
    put 0 -> _pNode + 4;

    push _pNode;
    sub Stack::Swap;
    return;


"(Type::JsonType) => (::JsonNode)
lab Json::Node::Create;
lab Json::Node::CreateByType;
    sub Stack::Swap;
    pull _type;

    sub Json::Core::AllocateNode;
    pull _node;
    put _type -> _node + _Json::Node::Type;

    push _node;
    sub Stack::Swap;
    return;


"(::JsonNode)
lab Json::Node::Delete;
    sub Stack::Swap;
    pull _node;

    put _type <- _node + _Json::Node::Type;
    jump Json::Node::Delete::Null   ~ _type == _Json::Type::NULL  ;
    jump Json::Node::Delete::True   ~ _type == _Json::Type::TRUE  ;
    jump Json::Node::Delete::False  ~ _type == _Json::Type::FALSE ;
    jump Json::Node::Delete::Number ~ _type == _Json::Type::NUMBER;
    jump Json::Node::Delete::Object ~ _type == _Json::Type::OBJECT;
    jump Json::Node::Delete::Array  ~ _type == _Json::Type::ARRAY ;
    jump Json::Node::Delete::String ~ _type == _Json::Type::STRING;

    "invaild type will be ignored
    return;


    lab Json::Node::Delete::Null;
    lab Json::Node::Delete::True;
    lab Json::Node::Delete::False;
    lab Json::Node::Delete::Number;
        jump Json::Node::Delete::Free;

    lab Json::Node::Delete::Object;
        put _name <- _node + _Json::Node::Name;
        push _name; sub Json::Node::Delete::Recurse;

    lab Json::Node::Delete::Array;
        put _next <- _node + _Json::Node::Next;
        push _next;
        sub Json::Node::Delete::Recurse ~ _next != 0;
        sub Stack::Drop                 ~ _next == 0;

        put _sub <- _node + _Json::Node::Sub;
        push _sub; sub Json::Node::Delete::Recurse;

        jump Json::Node::Delete::Free;

    lab Json::Node::Delete::String;
        put _string <- _node + _Json::Node::String;
        free _string;
        jump Json::Node::Delete::Free;

    lab Json::Node::Delete::Free;
        free _node;
        return;


    lab Json::Node::Delete::Recurse;
        sub Stack::Swap;
        pull _target;
        push _node;
        push _target;
        sub Json::Node::Delete;
        pull _node;
        sub Stack::Swap;
        return;




"(Prev::JsonNode, This::JsonNode)
lab Json::Node::Hook;
    sub Stack::Swap; pull _this;
    sub Stack::Swap; pull _prev;

    put _this -> _prev + _Json::Node::Next;
    put _prev -> _this + _Json::Node::Prev;

    return;

"(Prev::JsonNode, This::JsonNode)
lab Json::Node::SoftHook;
    sub Stack::Swap; pull _this;
    sub Stack::Swap; pull _prev;

    sub No::Return ~ _this | _prev == 0;

    put _this -> _prev + _Json::Node::Next;
    put _prev -> _this + _Json::Node::Prev;

    return;






lab Json::Core::Skip;


