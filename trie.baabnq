
use 'libs/stack.baabnq';
use 'libs/no.baabnq';


sub Trie::ModuleInit;

jump Trie::Skip;


lab Trie::ModuleInit;
    "trie structure
    " _p + 0 -> sub :: Chunk[16]
    " _p + 1 -> end :: Bool

    "sub contains the references to sub nodes.
    "end indicates whether node constitudes a sequence or not.

    "a trickle is a sequence of nibbles,
    "and is the type of sequence that this trie implementation uses.
    "this is the case, because 16 entires per nodes strikes a good balance.


    put _Trie::Trie::SUB = 0;
    put _Trie::Trie::END = 1;

    return;


"=> (::Trie)
lab Trie::Allocate;
    new 2 _pNewTrie;

    push _pNewTrie;
    sub Stack::Swap;
    return;


"=> (::Trie)
lab Trie::Create;
    sub Trie::Allocate;
    pull _pNewTrie;

    new 16 _pSub;
    put _pSub -> _pNewTrie + _Trie::Trie::SUB;

    push _pNewTrie;
    sub Stack::Swap;
    return;


"(::Trie)
lab Trie::Delete;
    sub Stack::Swap;
    pull _pTrie;

    sub No::Return ~ _pTrie == 0;

    put _pSub <- _pTrie + _Trie::Trie::SUB;
    free _pTrie;

    lab Trie::Delete::Loop;
        put __ <- _pSub + _i;
        put _i = _i + 1;

        push _i;
        push _pSub;
            push __;
            sub Trie::Delete;
        pull _pSub;
        pull _i;
    jump Trie::Delete::Loop ~ _i < 5;

    return;


"(::Chunk) => (::Trickle)
"conversion utility
lab Trie::ChunkToTrickle;
    sub Stack::Swap;
    pull _pChunk;

    push _pChunk; sub Chunk::Len; pull _chunkLen;
    put _trickleLen = _chunkLen << 2; "4 nibbles per word, ergo multiply by 4

    new _trickleLen _pTrickle;

    put _i = 0;
    lab Trie::ChunkToTrickle::Loop;
        put _chunk <- _pChunk + _i;

        put __ = _i << 2;
        put (_chunk >> 12) & 15 -> _pTrickle + __ + 0;
        put (_chunk >> 08) & 15 -> _pTrickle + __ + 1;
        put (_chunk >> 04) & 15 -> _pTrickle + __ + 2;
        put (_chunk >> 00) & 15 -> _pTrickle + __ + 3;

        put _i = _i + 1;
    jump Trie::ChunkToTrickle::Loop ~ _i < _chunkLen;

    push _pTrickle;
    sub Stack::Swap;
    return;


"(::Trie, ::Trickle)
"inserts trickle sequence into trie
lab Trie::InsertTrickle;
    sub Stack::Swap; pull _pTrickle;
    sub Stack::Swap; pull _pTrie;

    put _pIter = _pTrie;

    push _pTrickle; sub Chunk::Len; pull _len;
    put _i = 0;
    lab Trie::InsertTrickle::Loop;
        put _nibble <- _pTrickle + _i;

        put _pSubs <- _pIter + _Trie::Trie::SUB;
        put _pSubAddr = _pSubs + (_nibble & 15);
        put _pSubTrie <- _pSubAddr;
        jump Trie::InsertTrickle::Loop::NewSubTrieSkip ~ _pSubTrie != 0;
            sub Trie::Create;
            pull _pSubTrie;
            put _pSubTrie -> _pSubAddr;
        lab Trie::InsertTrickle::Loop::NewSubTrieSkip;

        put _pIter = _pSubTrie;
        put _i = _i + 1;
    jump Trie::InsertTrickle::Loop ~ _i < _len;

    put 1 -> _pIter + _Trie::Trie::END;

    return;


"(Start::Trie, ::Trickle) => (End::Trie)
"traverses through trie tree based on trickle sequence
lab Trie::TraverseTrickle;
    sub Stack::Swap; pull _pTrickle;
    sub Stack::Swap; pull _pStart;

    put _pIter = _pStart;

    push _pTrickle; sub Chunk::Len; pull _len;
    put _i = 0;
    lab Trie::TraverseTrickle::Loop;
        put _nibble <- _pTrickle + _i;

        put _pSubs <- _pIter + _Trie::Trie::SUB;
        put _pIter <- _pSubs + (_nibble & 15);

        jump Trie::TraverseTrickle::Fail ~ _pIter == 0;

        put _i = _i + 1;
    jump Trie::TraverseTrickle::Loop ~ _i < _len;

    lab Trie::TraverseTrickle::Fail;

    push _pIter;
    sub Stack::Swap;
    return;



"(::Trie, ::Trickle) => (Matching::Bool)
"searches for sequence in trie
lab Trie::SearchTrickle;
    sub Stack::Swap; pull _pTrickle;
    sub Stack::Swap; pull _pTrie;

    push _pTrie;
    push _pTrickle;
    sub Trie::TraverseTrickle;
    pull _pEnd;

    put _end <- _pEnd + _Trie::Trie::END;

    push 0;
    push _end;
    sub Stack::Swap ~ _pEnd != 0;
    pull __;

    sub Stack::Swap;
    return;


"(::Trie, ::Trickle) => (Matching::Bool)
"searches for sequence in trie without checking for sequence termination
lab Trie::PrefixTrickle;
    sub Stack::Swap; pull _pTrickle;
    sub Stack::Swap; pull _pTrie;

    push _pTrie;
    push _pTrickle;
    sub Trie::TraverseTrickle;
    pull _pEnd;

    push 0;
    push 1;
    sub Stack::Swap ~ _pEnd != 0;
    pull __;

    sub Stack::Swap;
    return;



"(::Trie, ::Chunk)
lab Trie::InsertChunk;
    sub Stack::Swap; pull _pChunk;
    sub Stack::Swap; pull _pTrie;

    push _pChunk; sub Trie::ChunkToTrickle; pull _pTrickle;

    push _pTrie;
    push _pTrickle;
    sub Trie::InsertTrickle;

    free _pTrickle;

    return;





    

lab Trie::Skip;


