
use 'libs/stack.baabnq';
use 'libs/float.baabnq';
use 'libs/chunk.baabnq';


jump Vec::Skip;

lab Vec::ModuleInit;
    sub Floats::ModuleInit;

    "vec<n> structure
    " _p + <i> -> component<i> :: Float
    "   ( where ∀i∈[0;n-1] )

    "size of the vector is also size of vec structure,
    "as a vector of size n will have n entries

    put _Vec::Iter::pCumul = 0;
    put _Vec::Iter::pAuxil = 0;
    put _Vec::Iter::Index  = 0;

    return;


"(N::Int) => (::Vec<N>)
lab Vec::Create;
    sub Stack::Swap;
    pull _size;

    new _size _pVec;

    push _pVec;
    push _Floats::Zero;
    sub Chunk::Fill;

    push _pVec;
    sub Stack::Swap;
    return;


"(::Vec<N>)
lab Vec::Delete;
    sub Stack::Swap;
    pull _pVec;

    free _pVec;
    return;

"(::Vec<N>) => (N::Int)
lab Vec::Dim;
    sub Stack::Swap;

    sub Chunk::Len;

    sub Stack::Swap;
    return;

"(::Vec<N>) => (::Vec<N>)
lab Vec::Copy;
    sub Stack::Swap;

    sub Chunk::Copy;

    sub Stack::Swap;
    return;



"(A::Vec<N>, B::Vec<M>) => (Size::Int)
"Size = N == M ? N : 0
lab Vec::VerifyDims;
    sub Stack::Swap;
        sub Vec::Dim;
        pull _n;
    sub Stack::Swap;
        sub Vec::Dim;
        pull _m;

    push 0;
    push _n;
    sub Stack::Swap ~ _n == _m;
    pull __;

    sub Stack::Swap;
    return;



lab Vec::Iter;
"   Vec::Iter<A> (where A∈{Bin, Una})
"   is a system that effectively functions as a compile-time closure.
"   it does so by modifying the stack-frames of mesa routines,
"   causing them to, instead of returning to their meta routine,
"   jump back to an earlier part of themself, inducing a loop.
"   this induced looping behavior is exploited to iterate over the vector.

"   all routines under Vec::Iter<A> use forth-like type signatures
    return;

"(Mesa::Address, Meta::Address, Auxil::Vec, Cumul::Vec) -- (Meta::Address, Mesa::Address)
lab Vec::IterBin::Register;
    pull _aMesa;
    pull _aMeta;

        pull _Vec::Iter::pAuxil;
        pull _Vec::Iter::pCumul;

        push _Vec::Iter::pCumul;
        push _Vec::Iter::pAuxil;
        sub Vec::VerifyDims;
        pull _Vec::Iter::Index;

    push _aMeta;
    push _aMesa;
    return;



"(Mesa::Address, Meta::Address, Cumul::Vec) -- (Meta::Address, Mesa::Address)
lab Vec::IterUna::Register;
    pull _aMesa;
    pull _aMeta;

        pull _Vec::Iter::pCumul;

        push _Vec::Iter::pCumul;
        sub Vec::Dim;
        pull _Vec::Iter::Index;

    push _aMeta;
    push _aMesa;
    return;



"   (Mesa::Address) -- (
"       Loop::Address,
"       CumulComponent::Int,
"       AuxilComponent::Int,
"       Mesa::Address
"   )
lab Vec::IterBin::Begin;
    "mesa for the call to Vec::IterBin::Begin
    "as opposed to meta for the call calling this routine
    pull _aMesa;

    "address of start of loop,
    "which is used to continue to loop
    push _aMesa - 1;

    "update loop index
    put _Vec::Iter::Index = _Vec::Iter::Index - 1;

    "construct in-frame for vector operation
    put _cumul <- _Vec::Iter::pCumul + _Vec::Iter::Index; push _cumul;
    put _auxil <- _Vec::Iter::pAuxil + _Vec::Iter::Index; push _auxil;

    push _aMesa;
    return;



"   (Mesa::Address) -- (
"       Loop::Address,
"       CumulComponent::Int,
"       Mesa::Address
"   )
lab Vec::IterUna::Begin;
    "mesa for the call to Vec::IterBin::Begin
    "as opposed to meta for the call calling this routine
    pull _aMesa;

    "address of start of loop,
    "which is used to continue to loop
    push _aMesa - 1;

    "update loop index
    put _Vec::Iter::Index = _Vec::Iter::Index - 1;

    "construct in-frame for vector operation
    put _cumul <- _Vec::Iter::pCumul + _Vec::Iter::Index; push _cumul;

    push _aMesa;
    return;




"(Mesa::Address, Cumulator::Float, Loop::Address) -- (Target::Address)
"Target::Address = LoopIndex > 0 ? Loop::Address : Mesa::Address
lab Vec::IterBin::End;
lab Vec::IterUna::End;
    pull _aMesa;

    "deconstruct out-frame for vector operation
    pull _cumul; put _cumul -> _Vec::Iter::pCumul + _Vec::Iter::Index;

    "pull loop address
    pull _aLoop;

    "continue loop if index is bound
    push _aMesa;
    push _aLoop;
    sub Stack::Swap ~ _Vec::Iter::Index > 0;
    pull __;
    return;

"(Mesa::Address,  Loop::Address) -- (Target::Address)
"Target::Address = LoopIndex > 0 ? Loop::Address : Mesa::Address
lab Vec::IterBin::EndNoWriteback;
lab Vec::IterUna::EndNoWriteback;
    pull _aMesa;

    "pull loop address
    pull _aLoop;

    "continue loop if index is bound
    push _aMesa;
    push _aLoop;
    sub Stack::Swap ~ _Vec::Iter::Index > 0;
    pull __;
    return;


"(Cumulator::Vec<n>, Addend::Vec<n>)
lab Vec::Add;
    sub Vec::IterBin::Register;

    sub Vec::IterBin::Begin;
        sub Floats::Add;
    sub Vec::IterBin::End;

    return;

"(::Vec<n>)
lab Vec::Neg;
    sub Vec::IterUna::Register;

    sub Vec::IterUna::Begin;
        sub Floats::Neg;
    sub Vec::IterUna::End;

    return;

"(Cumulator::Vec<n>, Factor::Vec<n>)
lab Vec::Mul;
    sub Vec::IterBin::Register;

    sub Vec::IterBin::Begin;
        sub Floats::Mul;
    sub Vec::IterBin::End;

    return;

"(Cumulator::Vec<n>, Denominator::Vec<n>)
lab Vec::Div;
    sub Vec::IterBin::Register;

    sub Vec::IterBin::Begin;
        sub Floats::Div;
    sub Vec::IterBin::End;

    return;

"(::Vec<n>, Scalar::Int)
lab Vec::Scale;
    sub Stack::Swap;
    pull _scalar;
    sub Vec::IterUna::Register;

    sub Vec::IterUna::Begin;
        push _scalar;
        sub Floats::Mul;
    sub Vec::IterUna::End;

    return;

"(::Vec<n>, InvScalar::Int)
lab Vec::InvScale;
    sub Stack::Swap;
    pull _scalar;
    sub Vec::IterUna::Register;

    sub Vec::IterUna::Begin;
        push _scalar;
        sub Floats::Div;
    sub Vec::IterUna::End;

    return;

"(::Vec<n>) => (Sum::Int)
"vector component sum
lab Vec::Sum;
    sub Vec::IterUna::Register;

    put _sum = _Floats::Zero;
    sub Vec::IterUna::Begin;
        push _sum;
        sub Floats::Add;
        pull _sum;
    sub Vec::IterUna::EndNoWriteback;

    push _sum;
    sub Stack::Swap;
    return;


"(A::Vec<n>, B::Vec<n>) => (Dot::Int)
lab Vec::Dot;
    sub Vec::IterBin::Register;

    put _dot = _Floats::Zero;
    sub Vec::IterBin::Begin;
        sub Floats::Mul;
        push _dot;
        sub Floats::Add;
        pull _dot;

    sub Vec::IterBin::EndNoWriteback;

    push _dot;
    sub Stack::Swap;
    return;


"(::Vec<n>) => (Length::Int)
lab Vec::Length;
    sub Stack::Swap;

    sub Stack::Dup;
    sub Vec::Dot;
    sub Floats::Sqrt;

    sub Stack::Swap;
    return;

"(::Vec<n>)
lab Vec::Normalize;
    sub Stack::Swap;

    sub Stack::Dup;
    sub Vec::Length;
    sub Vec::InvScale;

    return;




lab Vec::Skip;


