use 'libs/stack.baabnq';
use 'libs/chunk.baabnq';

sub Expr::Token::ModuleInit;

jump Expr::Token::Skip;

lab Expr::Token::ModuleInit;
    "character type enumeration defines CharType"
    " OTHER  = 0
    " SYMBOL = 1
    " NUMBER = 2

    put _Expr::Token::CharType::OTHER  = 0;
    put _Expr::Token::CharType::SYMBOL = 1;
    put _Expr::Token::CharType::NUMBER = 2;


    "pointer to raw source
    put _Expr::Token::Source = 0;
    "buffer to hold current token
    static 32 _Expr::Token::Token;

    return;


"(T::CharType)
lab Expr::Token::GetCharType;
    put _char <- _Expr::Token::Source;

    static '+-*/()'     _Expr::Token::GetCharType::SymConst;
    static '0123456789' _Expr::Token::GetCharType::NumConst;

    "construct ctx
    push  _Expr::Token::CharType::SYMBOL; sub Stack::Swap;
        "test for symbol
        push _Expr::Token::GetCharType::SymConst; push _char;
        sub Chunk::Contains; pull __;
        sub No::Return ~ __ != 0;
    "destruct ctx
    sub Stack::Swap; pull __;

    push  _Expr::Token::CharType::NUMBER; sub Stack::Swap;
        "test for number
        push _Expr::Token::GetCharType::NumConst; push _char;
        sub Chunk::Contains; pull __;
        sub No::Return ~ __ != 0;
    sub Stack::Swap; pull __;

    "other
    push _Expr::Token::CharType::OTHER; sub Stack::Swap;
    return;




lab Expr::Token::Skip;
