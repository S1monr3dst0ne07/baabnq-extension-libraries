use 'libs/stack.baabnq';
use 'libs/chunk.baabnq';
use 'libs/string.baabnq';

use 'ext/expr/core.baabnq';
use 'ext/expr/token.baabnq';


jump Expr::Parse::Skip;


"=> (::ExprNode)
lab Expr::Parse::Expr;
    sub Expr::Parse::Term;
    pull _pLeft;

    "check if followed by operator
    put _nextChar <- _Expr::Token::Token;

    static '+' __; put __ <- __;
    jump Expr::Parse::Expr::CaseAdd ~ _nextChar == __;
    static '-' __; put __ <- __;
    jump Expr::Parse::Expr::CaseSub ~ _nextChar == __;

    "if not followed by operator, expr is done
    push _pLeft;
    sub Stack::Swap;
    return;


    lab Expr::Parse::Expr::CaseAdd;
        put _type = _Expr::Core::NodeType::ADD;
        jump Expr::Parse::Expr::Continue;
    lab Expr::Parse::Expr::CaseSub;
        put _type = _Expr::Core::NodeType::SUB;
        jump Expr::Parse::Expr::Continue;

    lab Expr::Parse::Expr::Continue;
        "save ctx
        push _type;
        push _pLeft;
        
        sub Expr::Token::Next;
        sub Expr::Parse::Expr; pull _pRight;

        "restore ctx
        pull _pLeft;
        pull _type;


        sub Expr::Core::AllocateNode;
        pull _pNode;
        put _pLeft  -> _pNode + _Expr::Core::ExprNode::Left;
        put _pRight -> _pNode + _Expr::Core::ExprNode::Right;
        put _type   -> _pNode + _Expr::Core::ExprNode::Type;
        
        push _pNode;
        sub Stack::Swap;
        return;


"=> (::ExprNode)
lab Expr::Parse::Term;
    sub Expr::Parse::Factor;
    pull _pLeft;

    "check if followed by operator
    put _nextChar <- _Expr::Token::Token;

    static '*' __; put __ <- __;
    jump Expr::Parse::Term::CaseMul ~ _nextChar == __;
    static '/' __; put __ <- __;
    jump Expr::Parse::Term::CaseDiv ~ _nextChar == __;

    push _pLeft;
    sub Stack::Swap;
    return;


    lab Expr::Parse::Term::CaseMul;
        put _type = _Expr::Core::NodeType::MUL;
        jump Expr::Parse::Term::Continue;
    lab Expr::Parse::Term::CaseDiv;
        put _type = _Expr::Core::NodeType::DIV;
        jump Expr::Parse::Term::Continue;

    lab Expr::Parse::Term::Continue;
        "save ctx
        push _type;
        push _pLeft;
        
        sub Expr::Token::Next;
        sub Expr::Parse::Term; pull _pRight;

        "restore ctx
        pull _pLeft;
        pull _type;

        sub Expr::Core::AllocateNode;
        pull _pNode;
        put _pLeft  -> _pNode + _Expr::Core::ExprNode::Left;
        put _pRight -> _pNode + _Expr::Core::ExprNode::Right;
        put _type   -> _pNode + _Expr::Core::ExprNode::Type;
        
        push _pNode;
        sub Stack::Swap;
        return;
    

"=> (::ExprNode)
lab Expr::Parse::Factor;
    put _nextChar <- _Expr::Token::Token;

    static '(' __; put __ <- __;
    jump Expr::Parse::Paren ~ _nextChar == __;
    jump Expr::Parse::Num   ~ _nextChar != __;



"=> (::ExprNode)
lab Expr::Parse::Paren;
    sub Expr::Token::Next;
    sub Expr::Parse::Expr;
    sub Expr::Token::Next;

    sub Stack::Swap;
    return;

"=> (::ExprNode)"
lab Expr::Parse::Num;
    push _Expr::Token::Token; sub String::Str2Int; pull _num;

    sub Expr::Core::AllocateNode; pull _pOut;
    put _num                        -> _pOut + _Expr::Core::ExprNode::Num;
    put _Expr::Core::NodeType::NUM -> _pOut + _Expr::Core::ExprNode::Type;

    sub Expr::Token::Next;

    push _pOut;
    sub Stack::Swap;
    return;

"(Source::String) => (::ExprNode)
lab Expr::Parse;
    "initialize source buffer
    sub Stack::Swap;
    pull _Expr::Token::Source;

    
    "pull first token
    sub Expr::Token::Next;

    sub Expr::Parse::Expr;
    sub Stack::Swap;
    return;



lab Expr::Parse::Skip;
