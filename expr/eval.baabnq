
use 'libs/math.baabnq';

use 'ext/expr/core.baabnq';
use 'ext/expr/token.baabnq';
use 'ext/expr/parse.baabnq';


jump Expr::Eval::Skip;





"(::ExprNode) => (Result::Int)
lab Expr::Eval::Invaild;
    sub Stack::Swap;
        pull __; "discard node pointer
        push 0;  "push null to match interface
    sub Stack::Swap;
    return;



"(::ExprNode) => (Result::Int)
lab Expr::Eval::Num;
    sub Stack::Swap;
    pull _pNode;

    put _num <- _pNode + _Expr::Core::ExprNode::Num;

    push _num;
    sub Stack::Swap;
    return;


"(::ExprNode) => (Left::Int, Right::Int)
lab Expr::Eval::EvalBothSubBranches;
    sub Stack::Swap;
    pull _pNode;

    put _pLeft  <- _pNode + _Expr::Core::ExprNode::Left;
    put _pRight <- _pNode + _Expr::Core::ExprNode::Right;

    push _pLeft;  "first frame
    push _pRight; "second frame

    sub Expr::Eval;  "first call
    sub Stack::Swap; "ctx swap
    sub Expr::Eval;  "second call
    sub Stack::Swap; "ctx backswap

    "fix stack
    pull __;
    sub Stack::Swap;
    push __;
    sub Stack::Swap;

    return;


"(::ExprNode) => (Result::Int)
lab Expr::Eval::Add;
    sub Stack::Swap;
    sub Expr::Eval::EvalBothSubBranches;
    sub Math::Add;
    sub Stack::Swap;
    return;

    
"(::ExprNode) => (Result::Int)
lab Expr::Eval::Sub;
    sub Stack::Swap;
    sub Expr::Eval::EvalBothSubBranches;
    sub Math::Sub;
    sub Stack::Swap;
    return;
    

"(::ExprNode) => (Result::Int)
lab Expr::Eval::Mul;
    sub Stack::Swap;
    sub Expr::Eval::EvalBothSubBranches;
    sub Math::Mul;
    sub Stack::Swap;
    return;


"(::ExprNode) => (Result::Int)
lab Expr::Eval::Div;
    sub Stack::Swap;
    sub Expr::Eval::EvalBothSubBranches;
    sub Math::Div;
    sub Stack::Swap;
    return;



"(::ExprNode) => (Result::Int)
lab Expr::Eval;
    "reserve stack for subsequent call
    sub Stack::Swap;
        sub Stack::Dup;
        pull _pNode;
    sub Stack::Swap;

    jump Expr::Eval::Invaild ~ _pNode == 0;

    put _type <- _pNode + _Expr::Core::ExprNode::Type;
    jump Expr::Eval::Num ~ _type == _Expr::Core::NodeType::NUM;
    jump Expr::Eval::Add ~ _type == _Expr::Core::NodeType::ADD;
    jump Expr::Eval::Sub ~ _type == _Expr::Core::NodeType::SUB;
    jump Expr::Eval::Mul ~ _type == _Expr::Core::NodeType::MUL;
    jump Expr::Eval::Div ~ _type == _Expr::Core::NodeType::DIV;
   
    jump Expr::Eval::Invaild;









lab Expr::Eval::Skip;




