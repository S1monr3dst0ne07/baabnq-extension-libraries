
use 'libs/stack.baabnq';



"ringbuf structure
" _p+0 -> size      :: Int
" _p+1 -> head      :: Ptr
" _p+2 -> tail      :: Ptr
" _p+3 -> end       :: Ptr
" _p+4 -> container :: Chunk

"the head pointer tracks write to the buffer.
"the tail pointer tracks reading from the buffer.
"the end pointer points to the end of container,
"to allow for bounds checking

"capacity is stored by container, because it's a chunk.

put _Ringbuf::Ringbuf::SIZE         = 0;
put _Ringbuf::Ringbuf::HEAD         = 1;
put _Ringbuf::Ringbuf::TAIL         = 2;
put _Ringbuf::Ringbuf::END          = 3;
put _Ringbuf::Ringbuf::CONTAINER    = 4;



"=> (::Ringbuf)
lab Ringbuf::Allocate;
    new 5 _pRing;

    put 0 -> _Ringbuf::Ringbuf::SIZE;
    put 0 -> _Ringbuf::Ringbuf::HEAD;
    put 0 -> _Ringbuf::Ringbuf::TAIL;
    put 0 -> _Ringbuf::Ringbuf::END;
    put 0 -> _Ringbuf::Ringbuf::CONTAINER;

    push _pRing;
    sub Stack::Swap;
    return;

"(Capacity::Int) => (::Ringbuf)
lab Ringbuf::Create;
    sub Stack::Swap;
    pull _capacity;

    sub Ringbuf::Allocate;
    pull _pRing;

    new _capacity _pContainer;
    put _pContainer -> _pRing + _Ringbuf::Ringbuf::CONTAINER;

    push _pRing;
    sub Stack::Swap;
    return;




