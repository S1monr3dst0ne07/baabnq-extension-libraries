
use 'libs/stack.baabnq';
use 'libs/no.baabnq';


sub Ringbuf::ModuleInit;

jump Ringbuf::Skip;


lab Ringbuf::ModuleInit;
    "ringbuf structure
    " _p+0 -> size      :: Int
    " _p+1 -> head      :: Ptr
    " _p+2 -> tail      :: Ptr
    " _p+3 -> end       :: Ptr
    " _p+4 -> container :: Chunk

    "the head pointer tracks write to the buffer.
    "the tail pointer tracks reading from the buffer.
    "the end pointer points to the end of container,
    "to allow for bounds checking

    "capacity is stored by container, because it's a chunk.

    put _Ringbuf::Ringbuf::SIZE         = 0;
    put _Ringbuf::Ringbuf::HEAD         = 1;
    put _Ringbuf::Ringbuf::TAIL         = 2;
    put _Ringbuf::Ringbuf::END          = 3;
    put _Ringbuf::Ringbuf::CONTAINER    = 4;
    
    return;





"=> (::Ringbuf)
lab Ringbuf::Allocate;
    new 5 _pRing;

    put 0 -> _Ringbuf::Ringbuf::SIZE;
    put 0 -> _Ringbuf::Ringbuf::HEAD;
    put 0 -> _Ringbuf::Ringbuf::TAIL;
    put 0 -> _Ringbuf::Ringbuf::END;
    put 0 -> _Ringbuf::Ringbuf::CONTAINER;

    push _pRing;
    sub Stack::Swap;
    return;


"(::Ringbuf, Field::PtrPtr)
"advances field in Ringbuf object,
"while performing bounds checks.
"this is used to advance head and tail.
lab Ringbuf::AdvancePtr;
    sub Stack::Swap; pull _ppField;
    sub Stack::Swap; pull _pRing;

    put _pField <- _ppField;
    put _pEnd   <- _pRing + _Ringbuf::Ringbuf::END;

    jump Ringbuf::AdvancePtr::Teleport ~ _pField == _pEnd;
        put _pField + 1 -> _ppField;
        return;

    lab Ringbuf::AdvancePtr::Teleport;
        put _pContainer <- _pRing + _Ringbuf::Ringbuf::CONTAINER;
        put _pContainer -> _ppField;
        return;



"(::Ringbuf) => (Container::Chunk)
lab Ringbuf::Container;
    sub Stack::Swap;
    pull _pRing;

    put _pContainer <- _pRing + _Ringbuf::Ringbuf::CONTAINER;

    push _pContainer;
    sub Stack::Swap;
    return;


"(::Ringbuf) => (Size::Int)
lab Ringbuf::Size;
    sub Stack::Swap;
    pull _pRing;

    put _size <- _pRing + _Ringbuf::Ringbuf::SIZE;

    push _size;
    sub Stack::Swap;
    return;







"(Capacity::Int) => (::Ringbuf)
lab Ringbuf::Create;
    sub Stack::Swap;
    pull _capacity;

    sub No::Return ~ _capacity == 0;

    sub Ringbuf::Allocate;
    pull _pRing;

    new _capacity _pContainer;
    put _pEnd = _pContainer + _capacity - 1;


    put _pContainer -> _pRing + _Ringbuf::Ringbuf::CONTAINER;
    put _pContainer -> _pRing + _Ringbuf::Ringbuf::HEAD;
    put _pContainer -> _pRing + _Ringbuf::Ringbuf::TAIL;
    put _pEnd       -> _pRing + _Ringbuf::Ringbuf::END;
    

    push _pRing;
    sub Stack::Swap;
    return;


"(::Ringbuf)
lab Ringbuf::Delete;
    sub Stack::Swap;
    pull _pRing;

    push _pRing; sub Ringbuf::Container; pull _pContainer;

    free _pRing;
    free _pContainer;

    return;


"(::Ringbuf, Value::Int)
lab Ringbuf::Put;
    sub Stack::Swap; pull _value;
    sub Stack::Swap; pull _pRing;

    put _pHead      <- _pRing + _Ringbuf::Ringbuf::HEAD;
    put _size       <- _pRing + _Ringbuf::Ringbuf::SIZE;
    put _pContainer <- _pRing + _Ringbuf::Ringbuf::CONTAINER;
    push _pContainer; sub Chunk::Len; pull _capacity;


    "write fails if buffer is full
    sub No::Return ~ _size == _capacity;

    put _value -> _pHead;

    push _pRing;
    push _pRing + _Ringbuf::Ringbuf::HEAD;
    sub Ringbuf::AdvancePtr;

    put _size     <- _pRing + _Ringbuf::Ringbuf::SIZE;
    put _size + 1 -> _pRing + _Ringbuf::Ringbuf::SIZE;

    return;



"(::Ringbuf) => (Value::Int)
lab Ringbuf::Peek;
    sub Stack::Swap;
    pull _pRing;

    put _pTail <- _pRing + _Ringbuf::Ringbuf::TAIL;
    put _size  <- _pRing + _Ringbuf::Ringbuf::SIZE;

    "peek fails if buffer is empty
    push 0;
    sub Stack::Swap;
        sub No::Return ~ _size == 0;
    sub Stack::Swap;
    pull __;

    put _value <- _pTail;

    push _value;
    sub Stack::Swap;
    return;



"(::Ringbuf) => (Value::Int)
lab Ringbuf::Get;
    sub Stack::Swap;
    pull _pRing;

    put _pTail <- _pRing + _Ringbuf::Ringbuf::TAIL;
    put _size  <- _pRing + _Ringbuf::Ringbuf::SIZE;

    "peek fails if buffer is empty
    push 0;
    sub Stack::Swap;
        sub No::Return ~ _size == 0;
    sub Stack::Swap;
    pull __;

    put _value <- _pTail;

    push _pRing;
    push _pRing + _Ringbuf::Ringbuf::TAIL;
    sub Ringbuf::AdvancePtr;

    put _size - 1 -> _pRing + _Ringbuf::Ringbuf::SIZE;

    push _value;
    sub Stack::Swap;
    return;















lab Ringbuf::Skip;
