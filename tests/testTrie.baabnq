

use 'libs/tests/common.baabnq';
use 'libs/chunk.baabnq';
use 'ext/trie.baabnq';

lab Local::TestTrie::Init;
    sub Trie::ModuleInit;
return;


lab TestTrie::Allocate;
    sub Local::TestTrie::Init;

    sub Trie::Allocate;
    pull _pTrie;

    push _pTrie; sub Chunk::Len; pull __;
    jump fail ~ __ != 2;

    jump succ;


lab TestTrie::Create;
    sub Local::TestTrie::Init;

    sub Trie::Create;
    pull _pTrie;

    push _pTrie; sub Chunk::Len; pull __;
    jump fail ~ __ != 2;

    put __ <- _pTrie + _Trie::Trie::SUB;
    push __; sub Chunk::Len; pull __;
    jump fail ~ __ != 16;

    jump succ;


lab TestTrie::Delete;
    sub Local::TestTrie::Init;

    sub Trie::Create;
    sub Trie::Create;
    pull _pTrie; pull _pSubTrie;

    put _pSubs <- _pTrie + _Trie::Trie::SUB;
    put _pSubTrie -> _pSubs + 2;

    push _pTrie;
    sub Trie::Delete;

    jump succ;


lab TestTrie::ChunkToTrickle;
    sub Local::TestTrie::Init;

    static 2 _pIn;
    put ((1 << 12) + (2 << 8) + (3 << 4) + (4 << 0)) -> _pIn + 0;
    put ((5 << 12) + (6 << 8) + (7 << 4) + (8 << 0)) -> _pIn + 1;

    static '\x01\x02\x03\x04\x05\x06\x07\x08' _pRef;
    put 9 -> _pRef - 1; "override lenght prefix, to exclude null terminator of string

    push _pIn;
    sub Trie::ChunkToTrickle;

    push _pRef;
    sub Chunk::Cmp;
    pull __;
    jump fail ~ __ != 1;

    jump succ;

lab TestTrie::InsertTrickle;
    sub Trie::ModuleInit;

    static '\x00\x01\x02\x03\x04\x05\x06\x07\x08' _pRef;
    put __     <- _pRef - 1;
    put __ - 1 -> _pRef - 1;

    push _pRef;
    sub Chunk::Copy;
    pull _pIn;

    sub Trie::Create;
    pull _pTrie;

    push _pTrie;
    push _pIn;
    sub Trie::InsertTrickle;

    "_pIn and _pRef (the original) need to be the same,
    "as InsertTrickle is not allowed to (non-atomically) modify the trickle
    push _pIn;
    push _pRef;
    sub Chunk::Cmp;
    pull __;
    jump fail ~ __ != 1;

    put __ = _pTrie;
    put __ <- __ + _Trie::Trie::SUB; put __ <- __ + 0; jump fail ~ __ == 0;
    put __ <- __ + _Trie::Trie::SUB; put __ <- __ + 1; jump fail ~ __ == 0;
    put __ <- __ + _Trie::Trie::SUB; put __ <- __ + 2; jump fail ~ __ == 0;
    put __ <- __ + _Trie::Trie::SUB; put __ <- __ + 3; jump fail ~ __ == 0;
    put __ <- __ + _Trie::Trie::SUB; put __ <- __ + 4; jump fail ~ __ == 0;
    put __ <- __ + _Trie::Trie::SUB; put __ <- __ + 5; jump fail ~ __ == 0;
    put __ <- __ + _Trie::Trie::SUB; put __ <- __ + 6; jump fail ~ __ == 0;
    put __ <- __ + _Trie::Trie::SUB; put __ <- __ + 7; jump fail ~ __ == 0;
    put __ <- __ + _Trie::Trie::SUB; put __ <- __ + 8; jump fail ~ __ == 0;

    put __ <- __ + _Trie::Trie::END;
    jump fail ~ __ != 1;

    jump succ;
