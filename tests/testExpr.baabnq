
use 'libs/tests/common.baabnq';

use 'ext/expr/token.baabnq';
use 'ext/expr/parse.baabnq';
use 'ext/expr/eval.baabnq';


lab Local::TestExpr::Init;
    sub Expr::Token::ModuleInit;
    sub Expr::Core::ModuleInit;
return;



lab TestExpr::Core::ModuleInit;
    sub Local::TestExpr::Init;

    jump fail ~ _Expr::Core::NodeType::NUM != 0;
    jump fail ~ _Expr::Core::NodeType::ADD != 1;
    jump fail ~ _Expr::Core::NodeType::SUB != 2;
    jump fail ~ _Expr::Core::NodeType::MUL != 3;
    jump fail ~ _Expr::Core::NodeType::DIV != 4;

    jump fail ~ _Expr::Core::ExprNode::Type  != 0;
    jump fail ~ _Expr::Core::ExprNode::Left  != 1;
    jump fail ~ _Expr::Core::ExprNode::Right != 2;
    jump fail ~ _Expr::Core::ExprNode::Num   != 3;

    jump succ;

lab TestExpr::Core::AllocateNode;
    sub Local::TestExpr::Init;

    sub Expr::Core::AllocateNode;
    pull _pNode;

    put __ <- _pNode + 0; jump fail ~ __ != 0;
    put __ <- _pNode + 1; jump fail ~ __ != 0;
    put __ <- _pNode + 2; jump fail ~ __ != 0;
    put __ <- _pNode + 3; jump fail ~ __ != 0;

    jump succ;


lab TestExpr::Core::DeleteNode;
    sub Local::TestExpr::Init;

    sub Expr::Core::AllocateNode; pull _pTestNode0;
    sub Expr::Core::AllocateNode; pull _pTestNode1;
    sub Expr::Core::AllocateNode; pull _pTestNode2;

    "structurize, TestNode0 is root
    put _pTestNode1 -> _pTestNode0 + _Expr::Core::ExprNode::Left;
    put _pTestNode2 -> _pTestNode1 + _Expr::Core::ExprNode::Right;

    "delete
    push _pTestNode0;
    sub Expr::Core::DeleteNode;

    "now allocing three nodes again, should result in the same addresses,
    "as that space on the heap should be free

    sub Expr::Core::AllocateNode; pull __; jump fail ~ __ != _pTestNode0;
    sub Expr::Core::AllocateNode; pull __; jump fail ~ __ != _pTestNode1;
    sub Expr::Core::AllocateNode; pull __; jump fail ~ __ != _pTestNode2;

    jump succ;




    




lab TestExpr::Token::ModuleInit;
    sub Local::TestExpr::Init;

    jump fail ~ _Expr::Token::Source != 0;

    "token should be a buffer
    jump fail ~ _Expr::Token::Token  == 0;

    jump succ;

lab TestExpr::Token::GetCharType;
    sub Local::TestExpr::Init;

    "space -> OTHER = 0
    static ' ' _Expr::Token::Source;
    push __; sub Expr::Token::GetCharType;
    pull __; 
    jump fail ~ __ != 0;

    "alpha -> OTHER = 0
    static 'A' _Expr::Token::Source;
    push __; sub Expr::Token::GetCharType;
    pull __; 
    jump fail ~ __ != 0;



    "plus -> SYMBOL = 1
    static '+' _Expr::Token::Source;
    push __; sub Expr::Token::GetCharType;
    pull __; 
    jump fail ~ __ != 1;

    "minus -> SYMBOL = 1
    static '-' _Expr::Token::Source;
    push __; sub Expr::Token::GetCharType;
    pull __; 
    jump fail ~ __ != 1;

    "times -> SYMBOL = 1
    static '*' _Expr::Token::Source;
    push __; sub Expr::Token::GetCharType;
    pull __; 
    jump fail ~ __ != 1;

    "over -> SYMBOL = 1
    static '/' _Expr::Token::Source;
    push __; sub Expr::Token::GetCharType;
    pull __; 
    jump fail ~ __ != 1;

    "i'm not gonna do all the numbers
     
    "zero -> NUMBER = 2
    static '0' _Expr::Token::Source;
    push __; sub Expr::Token::GetCharType;
    pull __; 
    jump fail ~ __ != 2;

    "five -> NUMBER = 2
    static '5' _Expr::Token::Source;
    push __; sub Expr::Token::GetCharType;
    pull __; 
    jump fail ~ __ != 2;

    "nine -> NUMBER = 2
    static '9' _Expr::Token::Source;
    push __; sub Expr::Token::GetCharType;
    pull __; 
    jump fail ~ __ != 2;


    jump succ;


lab TestExpr::Token::Next;
    sub Local::TestExpr::Init;

    static '  (( 123 * 564 / 987 -+ ) MEOW' _Expr::Token::Source;

    static '(' __; push __;
    sub Expr::Token::Next; push _Expr::Token::Token;
    sub String::StrCmp; pull __;
    jump fail ~ __ != 0;

    static '(' __; push __;
    sub Expr::Token::Next; push _Expr::Token::Token;
    sub String::StrCmp; pull __;
    jump fail ~ __ != 0;

    static '123' __; push __;
    sub Expr::Token::Next; push _Expr::Token::Token;
    sub String::StrCmp; pull __;
    jump fail ~ __ != 0;

    static '*' __; push __;
    sub Expr::Token::Next; push _Expr::Token::Token;
    sub String::StrCmp; pull __;
    jump fail ~ __ != 0;

    static '564' __; push __;
    sub Expr::Token::Next; push _Expr::Token::Token;
    sub String::StrCmp; pull __;
    jump fail ~ __ != 0;

    static '/' __; push __;
    sub Expr::Token::Next; push _Expr::Token::Token;
    sub String::StrCmp; pull __;
    jump fail ~ __ != 0;

    static '987' __; push __;
    sub Expr::Token::Next; push _Expr::Token::Token;
    sub String::StrCmp; pull __;
    jump fail ~ __ != 0;

    static '-' __; push __;
    sub Expr::Token::Next; push _Expr::Token::Token;
    sub String::StrCmp; pull __;
    jump fail ~ __ != 0;
 
    static '+' __; push __;
    sub Expr::Token::Next; push _Expr::Token::Token;
    sub String::StrCmp; pull __;
    jump fail ~ __ != 0;

    static ')' __; push __;
    sub Expr::Token::Next; push _Expr::Token::Token;
    sub String::StrCmp; pull __;
    jump fail ~ __ != 0;

    jump succ;







lab TestExpr::Parse::Expr;
    sub Local::TestExpr::Init;

    static '1 + 1' _Expr::Token::Source; sub Expr::Token::Next;
    sub Expr::Parse::Expr; pull _pNode;
    put _type <- _pNode + _Expr::Core::ExprNode::Type;
    jump fail ~ _type != _Expr::Core::NodeType::ADD;
    
    static '1 - 1' _Expr::Token::Source; sub Expr::Token::Next;
    sub Expr::Parse::Expr; pull _pNode;
    put _type <- _pNode + _Expr::Core::ExprNode::Type;
    jump fail ~ _type != _Expr::Core::NodeType::SUB;


    jump succ;

lab TestExpr::Parse::Term;
    sub Local::TestExpr::Init;

    static '1 * 1' _Expr::Token::Source; sub Expr::Token::Next;
    sub Expr::Parse::Term; pull _pNode;
    put _type <- _pNode + _Expr::Core::ExprNode::Type;
    jump fail ~ _type != _Expr::Core::NodeType::MUL;
    
    static '1 / 1' _Expr::Token::Source; sub Expr::Token::Next;
    sub Expr::Parse::Term; pull _pNode;
    put _type <- _pNode + _Expr::Core::ExprNode::Type;
    jump fail ~ _type != _Expr::Core::NodeType::DIV;


    jump succ;

lab TestExpr::Parse::Factor;
    sub Local::TestExpr::Init;

    static '(1)' _Expr::Token::Source; sub Expr::Token::Next;
    sub Expr::Parse::Factor; pull _pNode;
    put _type <- _pNode + _Expr::Core::ExprNode::Type;
    jump fail ~ _type != _Expr::Core::NodeType::NUM;
    
    static '1' _Expr::Token::Source; sub Expr::Token::Next;
    sub Expr::Parse::Factor; pull _pNode;
    put _type <- _pNode + _Expr::Core::ExprNode::Type;
    jump fail ~ _type != _Expr::Core::NodeType::NUM;

    jump succ;

lab TestExpr::Parse::Paren;
    sub Local::TestExpr::Init;

    static '(1 + 1)' _Expr::Token::Source; sub Expr::Token::Next;
    sub Expr::Parse::Paren; pull _pNode;
    put _type <- _pNode + _Expr::Core::ExprNode::Type;
    jump fail ~ _type != _Expr::Core::NodeType::ADD;

    static '(1 - 1)' _Expr::Token::Source; sub Expr::Token::Next;
    sub Expr::Parse::Paren; pull _pNode;
    put _type <- _pNode + _Expr::Core::ExprNode::Type;
    jump fail ~ _type != _Expr::Core::NodeType::SUB;

    jump succ;

lab TestExpr::Parse::Num;
    sub Local::TestExpr::Init;

    static '123' _Expr::Token::Source; sub Expr::Token::Next;
    sub Expr::Parse::Num; pull _pNode;
    put _type <- _pNode + _Expr::Core::ExprNode::Type;
    jump fail ~ _type != _Expr::Core::NodeType::NUM;

    jump succ;

lab TestExpr::Parse;
    sub Local::TestExpr::Init;

    static '(1 + 2)' _sTest;
    push _sTest;
    sub Expr::Parse;
    pull _pNode;

    put _type <- _pNode + _Expr::Core::ExprNode::Type;
    jump fail ~ _type != _Expr::Core::NodeType::ADD;

    put _pLeft <- _pNode + _Expr::Core::ExprNode::Left;
    put _pRight <- _pNode + _Expr::Core::ExprNode::Right;

    put _type <- _pLeft + _Expr::Core::ExprNode::Type;
    put _num  <- _pLeft + _Expr::Core::ExprNode::Num;
    jump fail ~ _type != _Expr::Core::NodeType::NUM;
    jump fail ~ _num  != 1; 
    
    put _type <- _pRight + _Expr::Core::ExprNode::Type;
    put _num  <- _pRight + _Expr::Core::ExprNode::Num;
    jump fail ~ _type != _Expr::Core::NodeType::NUM;
    jump fail ~ _num  != 2; 

    jump succ;
    


    "static '((2 + 4 - 1) * (2 + 2) + 1) / 3' _sTest;



lab TestExpr::Eval::Invaild;
    sub Local::TestExpr::Init;

    sub Expr::Core::AllocateNode;
    
    sub Expr::Eval::Invaild;
    pull __;
    jump fail ~ __ != 0;

    jump succ;
    

lab TestExpr::Eval::Num;
    sub Local::TestExpr::Init;

    sub Expr::Core::AllocateNode;
    sub Stack::Dup;

    pull _pNode;
    put 123 -> _pNode + _Expr::Core::ExprNode::Num;

    sub Expr::Eval::Num;
    pull __;
    jump fail ~ __ != 123;

    jump succ;


lab Local::TestExpr::Eval::BuildTree;
    sub Expr::Core::AllocateNode;
    sub Expr::Core::AllocateNode;
    sub Expr::Core::AllocateNode;

    pull _pNode;
    pull _pLeft;
    pull _pRight;

    put _Expr::Core::NodeType::NUM -> _pLeft  + _Expr::Core::ExprNode::Type;
    put _Expr::Core::NodeType::NUM -> _pRight + _Expr::Core::ExprNode::Type;

    put _pLeft -> _pNode + _Expr::Core::ExprNode::Left;
    put _pRight -> _pNode + _Expr::Core::ExprNode::Right;

    return;

    

lab TestExpr::Eval::EvalBothSubBranches;
    sub Local::TestExpr::Init;

    sub Local::TestExpr::Eval::BuildTree;

    put 2 -> _pLeft  + _Expr::Core::ExprNode::Num;
    put 3 -> _pRight + _Expr::Core::ExprNode::Num;

    push _pNode;
    sub Expr::Eval::EvalBothSubBranches;
    pull _resRight;
    pull _resLeft;

    jump fail ~ _resLeft  != 2;
    jump fail ~ _resRight != 3;

    jump succ;


lab TestExpr::Eval::Add;
    sub Local::TestExpr::Init;

    sub Local::TestExpr::Eval::BuildTree;

    put 2 -> _pLeft  + _Expr::Core::ExprNode::Num;
    put 1 -> _pRight + _Expr::Core::ExprNode::Num;

    push _pNode;
    sub Expr::Eval::Add;
    pull __;
    jump fail ~ __ != 3;

    jump succ;

lab TestExpr::Eval::Sub;
    sub Local::TestExpr::Init;

    sub Local::TestExpr::Eval::BuildTree;

    put 2 -> _pLeft  + _Expr::Core::ExprNode::Num;
    put 1 -> _pRight + _Expr::Core::ExprNode::Num;

    push _pNode;
    sub Expr::Eval::Sub;
    pull __;
    jump fail ~ __ != 1;

    jump succ;


lab TestExpr::Eval::Mul;
    sub Local::TestExpr::Init;

    sub Local::TestExpr::Eval::BuildTree;

    put 3 -> _pLeft  + _Expr::Core::ExprNode::Num;
    put 4 -> _pRight + _Expr::Core::ExprNode::Num;

    push _pNode;
    sub Expr::Eval::Mul;
    pull __;
    jump fail ~ __ != 12;

    jump succ;


lab TestExpr::Eval::Div;
    sub Local::TestExpr::Init;

    sub Local::TestExpr::Eval::BuildTree;

    put 21 -> _pLeft  + _Expr::Core::ExprNode::Num;
    put 3  -> _pRight + _Expr::Core::ExprNode::Num;

    push _pNode;
    sub Expr::Eval::Div;
    pull __;
    jump fail ~ __ != 7;

    jump succ;
    


