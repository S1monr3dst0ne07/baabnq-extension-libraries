
use 'libs/tests/common.baabnq';
use 'libs/chunk.baabnq';
use 'ext/json/core.baabnq';


lab Local::TestJson::Init;
    sub Json::Core::ModuleInit;
return;


lab TestJson::Core::AllocateNode;
    sub Local::TestJson::Init;

    sub Json::Core::AllocateNode;
    pull _pNode;


    push _pNode; sub Chunk::Len; pull __;
    jump fail ~ __ != 5;

    put __ <- _pNode + _Json::Node::Next;   jump fail ~ __ != 0;
    put __ <- _pNode + _Json::Node::Prev;   jump fail ~ __ != 0;
    put __ <- _pNode + _Json::Node::Sub;    jump fail ~ __ != 0;
    put __ <- _pNode + _Json::Node::Type;   jump fail ~ __ != 0;
    put __ <- _pNode + _Json::Node::String; jump fail ~ __ != 0;
    put __ <- _pNode + _Json::Node::Number; jump fail ~ __ != 0;
    put __ <- _pNode + _Json::Node::Name;   jump fail ~ __ != 0;

    jump succ;


lab TestJson::Node::Create;
    sub Local::TestJson::Init;

    push _Json::Type::TRUE;
    sub Json::Node::Create;
    pull _pNode;

    put __ <- _pNode + _Json::Node::Next;   jump fail ~ __ != 0;
    put __ <- _pNode + _Json::Node::Prev;   jump fail ~ __ != 0;
    put __ <- _pNode + _Json::Node::Sub;    jump fail ~ __ != 0;
    put __ <- _pNode + _Json::Node::Type;   jump fail ~ __ != _Json::Type::TRUE;
    put __ <- _pNode + _Json::Node::String; jump fail ~ __ != 0;
    put __ <- _pNode + _Json::Node::Number; jump fail ~ __ != 0;
    put __ <- _pNode + _Json::Node::Name;   jump fail ~ __ != 0;

    jump succ;


