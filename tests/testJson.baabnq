
use 'libs/tests/common.baabnq';
use 'libs/chunk.baabnq';
use 'libs/string.baabnq';

use 'ext/json/core.baabnq';
use 'ext/json/parse.baabnq';
use 'ext/json/gener.baabnq';


lab Local::TestJson::Init;
    sub Json::Core::ModuleInit;
    sub Local::TestJson::InitConst;
return;


lab Local::TestJson::InitConst;
    "the string is formatted like this, because the stupid current version of the baabnq compiler can't handle it otherwise
    static '[{"_id":"6770916b851c6c99dfe64a3a","index":65535,"guid":"18e6a25b-1a57-4621-a26a-ff93befdb68b","isActive":true,"isInactive":false,"balance":"$1,674.02","picture":"http://placekitten.com/1920/1080","age":null,"eyeColor":"crimson","name":"Zero Kitty","gender":"enby","company":"Baabnq Inc.","email":"0@baabnq.void","phone":"<leave me alone>","address":"T H E   V O I D","about":"Black anthro cat","registered":"0000-00-00T00:00:00","tags":["cat","kitty","kitten","feline","neko","nxebur","nyaa","mrrreoww"],"friends":[{"id":0,"name":"S1monr3dst0ne07"},{"id":1,"name":"Ada Lovelace"},{"id":2,"name":"Grace Hopper"}],"greeting":"Hello, Zero Kitty!","favoriteFruit":"Cheese Burger"}]' _TestJson::JsonTestString;

    static 'test' _TestJson::SourceTestString;
    static 20     _TestJson::BufferTestString;

    return;



lab TestJson::Core::ModuleInit;
    sub Local::TestJson::Init;

    jump fail ~ _Json::Parse::Ptr != 0;
    jump fail ~ _Json::Gener::Ptr != 0;

    static ' '  __; put __ <- __; jump fail ~ __ != _Json::Const::SPACE;
    static '\t' __; put __ <- __; jump fail ~ __ != _Json::Const::TAB;
    static '\n' __; put __ <- __; jump fail ~ __ != _Json::Const::NEWLINE;
    static '\r' __; put __ <- __; jump fail ~ __ != _Json::Const::RETURN;
    static '{' __; put __ <- __; jump fail ~ __ != _Json::Const::OPENING_CURLY_BRACKET;
    static '}' __; put __ <- __; jump fail ~ __ != _Json::Const::CLOSING_CURLY_BRACKET;
    static '[' __; put __ <- __; jump fail ~ __ != _Json::Const::OPENING_SQUARE_BRACKET;
    static ']' __; put __ <- __; jump fail ~ __ != _Json::Const::CLOSING_SQUARE_BRACKET;
    static '"' __; put __ <- __; jump fail ~ __ != _Json::Const::QUOTE;
    static '9' __; put __ <- __; jump fail ~ __ != _Json::Const::9;
    static '0' __; put __ <- __; jump fail ~ __ != _Json::Const::0;
    static '+' __; put __ <- __; jump fail ~ __ != _Json::Const::PLUS;
    static '-' __; put __ <- __; jump fail ~ __ != _Json::Const::MINUS;
    static 't' __; put __ <- __; jump fail ~ __ != _Json::Const::t;
    static 'f' __; put __ <- __; jump fail ~ __ != _Json::Const::f;
    static 'n' __; put __ <- __; jump fail ~ __ != _Json::Const::n;

    jump succ;


lab TestJson::Core::AllocateNode;
    sub Local::TestJson::Init;

    sub Json::Core::AllocateNode;
    pull _pNode;


    push _pNode; sub Chunk::Len; pull __;
    jump fail ~ __ != 5;

    put __ <- _pNode + _Json::Node::Next;   jump fail ~ __ != 0;
    put __ <- _pNode + _Json::Node::Prev;   jump fail ~ __ != 0;
    put __ <- _pNode + _Json::Node::Sub;    jump fail ~ __ != 0;
    put __ <- _pNode + _Json::Node::Type;   jump fail ~ __ != 0;
    put __ <- _pNode + _Json::Node::String; jump fail ~ __ != 0;
    put __ <- _pNode + _Json::Node::Number; jump fail ~ __ != 0;
    put __ <- _pNode + _Json::Node::Name;   jump fail ~ __ != 0;

    jump succ;


lab TestJson::Node::Create;
    sub Local::TestJson::Init;

    push _Json::Type::TRUE;
    sub Json::Node::Create;
    pull _pNode;

    put __ <- _pNode + _Json::Node::Next;   jump fail ~ __ != 0;
    put __ <- _pNode + _Json::Node::Prev;   jump fail ~ __ != 0;
    put __ <- _pNode + _Json::Node::Sub;    jump fail ~ __ != 0;
    put __ <- _pNode + _Json::Node::Type;   jump fail ~ __ != _Json::Type::TRUE;
    put __ <- _pNode + _Json::Node::String; jump fail ~ __ != 0;
    put __ <- _pNode + _Json::Node::Number; jump fail ~ __ != 0;
    put __ <- _pNode + _Json::Node::Name;   jump fail ~ __ != 0;

    jump succ;


lab TestJson::Node::Hook;
    sub Local::TestJson::Init;

    sub Json::Core::AllocateNode;
    sub Json::Core::AllocateNode;
    pull _b;
    pull _a;

    put __ <- _a + _Json::Node::Next; jump fail ~ __ != 0;
    put __ <- _b + _Json::Node::Prev; jump fail ~ __ != 0;

    push _a; push _b; sub Json::Node::Hook;

    put __ <- _a + _Json::Node::Next; jump fail ~ __ != _b;
    put __ <- _b + _Json::Node::Prev; jump fail ~ __ != _a;

    jump succ;


lab TestJson::Node::SoftHook;
    sub Local::TestJson::Init;

    sub Json::Core::AllocateNode;
    sub Json::Core::AllocateNode;
    pull _b;
    pull _a;

    push 0; push 0; sub Json::Node::Hook;

    put __ <- _a + _Json::Node::Next; jump fail ~ __ != 0;
    push _a; push 0; sub Json::Node::SoftHook;
    put __ <- _a + _Json::Node::Next; jump fail ~ __ != 0;

    put __ <- _b + _Json::Node::Next; jump fail ~ __ != 0;
    push 0; push _b; sub Json::Node::SoftHook;
    put __ <- _b + _Json::Node::Next; jump fail ~ __ != 0;

    put __ <- _a + _Json::Node::Next; jump fail ~ __ != 0;
    put __ <- _b + _Json::Node::Prev; jump fail ~ __ != 0;
    push _a; push _b; sub Json::Node::SoftHook;
    put __ <- _a + _Json::Node::Next; jump fail ~ __ != _b;
    put __ <- _b + _Json::Node::Prev; jump fail ~ __ != _a;

    jump succ;





lab TestJson::Parse::Peek;
    sub Local::TestJson::Init;
    put _Json::Parse::Ptr = _TestJson::SourceTestString;

    put _should <- _TestJson::SourceTestString;
    sub Json::Parse::Peek;
    pull _is;

    jump fail ~ _is != _should;
    jump succ;

lab TestJson::Parse::Advance;
    sub Local::TestJson::Init;
    put _Json::Parse::Ptr = _TestJson::SourceTestString;
    
    sub Json::Parse::Advance;

    push _Json::Parse::Ptr;
    push _TestJson::SourceTestString;
    sub Math::Sub; pull __;
    jump fail ~ __ != 1;
    jump succ;

lab TestJson::Parse::Pop;
    sub Local::TestJson::Init;
    put _Json::Parse::Ptr = _TestJson::SourceTestString;

    "test normal operation
    put _should <- _TestJson::SourceTestString;
    sub Json::Parse::Pop;
    pull _is;

    "check peek
    jump fail ~ _is != _should;
    "check advance
    push _Json::Parse::Ptr;
    push _TestJson::SourceTestString;
    sub Math::Sub; pull __;
    jump fail ~ __ != 1;


    "test end of source buffer
    sub Json::Parse::Advance; "e
    sub Json::Parse::Advance; "s
    sub Json::Parse::Advance; "t

    "save old ptr position
    push _Json::Parse::Ptr;

    sub Json::Parse::Pop;
    pull _is;

    "check peek
    jump fail ~ _is != 0;
    "check advance
    pull __; "old ptr position
    jump fail ~ _Json::Parse::Ptr != __; 
   
    jump succ;


lab TestJson::Parse::WhiteSpace;
    sub Local::TestJson::Init;
    static '  \t\n\r  A' _Json::Parse::Ptr;

    sub Json::Parse::WhiteSpace;
    
    put __ <- _Json::Parse::Ptr;
    jump fail ~ __ != 65; "A

    sub Json::Parse::WhiteSpace;

    put __ <- _Json::Parse::Ptr;
    jump fail ~ __ != 65; "A

    jump succ;


lab TestJson::Parse::Expect;
    sub Local::TestJson::Init;

    put _Json::Parse::Ptr = _TestJson::SourceTestString;
    static 'te' __; push __; sub Json::Parse::Expect;
    put __ <- _Json::Parse::Ptr;
    jump fail ~ __ == 0;

    put _Json::Parse::Ptr = _TestJson::SourceTestString;
    static 'ab' __; push __; sub Json::Parse::Expect;
    put __ <- _Json::Parse::Ptr;
    jump fail ~ __ != 0;

    jump succ;


lab TestJson::Parse::MaybeCons;
    sub Local::TestJson::Init;

    put _Json::Parse::Ptr = _TestJson::SourceTestString;
    static 't' __; push __;
    sub Json::Parse::MaybeCons;

    push _Json::Parse::Ptr;
    push _TestJson::SourceTestString;
    sub Math::Sub; pull __;
    jump fail ~ __ != 1;


    put _Json::Parse::Ptr = _TestJson::SourceTestString;
    static 'a' __; push __;
    sub Json::Parse::MaybeCons;

    push _Json::Parse::Ptr;
    push _TestJson::SourceTestString;
    sub Math::Sub; pull __;
    jump fail ~ __ != 0;


    jump succ;




lab TestJson::Parse::String;
    sub Local::TestJson::Init;

    static '"hello world"' _Json::Parse::Ptr;

    sub Json::Parse::String;
    pull _pNode;

    "check content
    put __ <- _pNode + _Json::Node::String; push __;
    static 'hello world' __; push __;
    sub String::StrCmp;
    pull __;
    jump fail ~ __ != 0;

    "check type
    put _type <- _pNode + _Json::Node::Type;
    jump fail ~ _type != _Json::Type::STRING;

    free _pNode;

    jump succ;
    

lab TestJson::Parse::Int;
    sub Local::TestJson::Init;

    static '1234' _Json::Parse::Ptr;

    sub Json::Parse::Int;
    pull _pNode;

    "check content
    put __ <- _pNode + _Json::Node::Number;
    jump fail ~ __ != 1234;
    
    "check type
    put _type <- _pNode + _Json::Node::Type;
    jump fail ~ _type != _Json::Type::NUMBER;

    free _pNode;

    jump succ;
    
    
lab TestJson::Parse::Neg;
    sub Local::TestJson::Init;

    static '-1' _Json::Parse::Ptr;

    sub Json::Parse::Neg;
    pull _pNode;

    "check content
    put __ <- _pNode + _Json::Node::Number;
    jump fail ~ __ != (0 - 1);
    
    "check type
    put _type <- _pNode + _Json::Node::Type;
    jump fail ~ _type != _Json::Type::NUMBER;

    free _pNode;

    jump succ;
    

lab TestJson::Parse::True;
    sub Local::TestJson::Init;

    static 'trueA' _Json::Parse::Ptr;
    sub Json::Parse::True;
    pull _pNode;

    "check type
    put __ <- _pNode + _Json::Node::Type;
    jump fail ~ __ != _Json::Type::TRUE;

    "check ptr state
    put __ <- _Json::Parse::Ptr;
    jump fail ~ __ != 65;

    free _pNode;
    jump succ;

lab TestJson::Parse::False;
    sub Local::TestJson::Init;

    static 'falseA' _Json::Parse::Ptr;
    sub Json::Parse::False;
    pull _pNode;

    "check type
    put __ <- _pNode + _Json::Node::Type;
    jump fail ~ __ != _Json::Type::FALSE;

    "check ptr state
    put __ <- _Json::Parse::Ptr;
    jump fail ~ __ != 65;

    free _pNode;
    jump succ;

lab TestJson::Parse::Null;
    sub Local::TestJson::Init;

    static 'nullA' _Json::Parse::Ptr;
    sub Json::Parse::Null;
    pull _pNode;

    "check type
    put __ <- _pNode + _Json::Node::Type;
    jump fail ~ __ != _Json::Type::NULL;

    "check ptr state
    put __ <- _Json::Parse::Ptr;
    jump fail ~ __ != 65;

    free _pNode;
    jump succ;






lab TestJson::Gener::Advance;
    sub Local::TestJson::Init;
    put _Json::Gener::Ptr = _TestJson::BufferTestString;
    
    sub Json::Gener::Advance;

    push _Json::Gener::Ptr;
    push _TestJson::BufferTestString;
    sub Math::Sub; pull __;
    jump fail ~ __ != 1;

    jump succ;


lab TestJson::Gener::Emit;
    sub Local::TestJson::Init;

    "normal emit
    put _Json::Gener::Ptr = _TestJson::BufferTestString;

    static 'test' _sEmit; push _sEmit;
    sub Json::Gener::Emit;

    push _TestJson::BufferTestString;
    push _sEmit;
    sub String::StrCmp;
    pull __;
    jump fail ~ __ != 0;

    "nullptr emit
    put _Json::Gener::Ptr = _TestJson::BufferTestString;

    push 0;
    sub Json::Gener::Emit;

    "should not have emitted anything
    push _TestJson::BufferTestString;
    push _Json::Gener::Ptr;
    sub Math::Sub;
    pull __;
    jump fail ~ __ != 0;

    jump succ; 
































lab TestJson::Parse;
    sub Local::TestJson::Init;

    push _TestJson::JsonTestString;
    sub Json::Parse;
    pull __;
    jump fail ~ __ == 0;

    jump succ;




lab TestJson::Gener;
    sub Local::TestJson::Init;

    static 1024 _pBuffer;

    push _TestJson::JsonTestString;
    sub Json::Parse;
    pull _pNode;

    push _pNode;
    push _pBuffer;
    sub Json::Gener;

    push _pBuffer;
    push _TestJson::JsonTestString;
    sub String::StrCmp;
    pull __;
    jump fail ~ __ != 0;

    jump succ;


lab TestJson::Node::Delete;
    sub Local::TestJson::Init;

    push _TestJson::JsonTestString;
    sub Json::Parse;
    pull _pNode;

    push _pNode;
    sub Json::Node::Delete;

    jump succ;








