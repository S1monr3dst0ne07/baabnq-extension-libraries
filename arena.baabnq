
use 'libs/stack.baabnq';




sub Arena::ModuleInit;

jump Arena::Skip;


lab Arena::ModuleInit;
    "arena structure
    " _p+0 -> memory :: Chunk
    " _p+1 -> index  :: Int"

    "memory is preallocated and then cut into regions,
    "of the needed size linearly. in this,
    "index tracks the boundary between used and free memory.

    "capacity is stored by memory, because it's a chunk

    put _Arena::Arena::MEMORY = 0;
    put _Arena::Arena::INDEX  = 1;

    return;


"=> (::Arena)
lab Arena::Allocate;
    new 2 _pArena;

    put 0 -> _pArena + _Arena::Arena::MEMORY;
    put 0 -> _pArena + _Arena::Arena::INDEX;

    push _pArena;
    sub Stack::Swap;
    return;

"(Capacity::Int) => (::Arena)"
lab Arena::Create;
    sub Stack::Swap;
    pull _capacity;

    sub Arena::Allocate;
    pull _pArena;

    new _capacity _pMemory;
    put _pMemory -> _pArena + _Arena::Arena::MEMORY;

    push _pArena;
    sub Stack::Swap;
    return;


"(::Arena) => (Memory::Chunk)
lab Arena::GetMemory;
    sub Stack::Swap;
    pull _pArena;

    put _pMemory <- _pArena + _Arena::Arena::MEMORY;

    push _pMemory;
    sub Stack::Swap;
    return;


"(::Arena) => (Index::Int)
lab Arena::GetIndex;
    sub Stack::Swap;
    pull _pArena;

    put _index <- _pArena + _Arena::Arena::INDEX;

    push _index;
    sub Stack::Swap;
    return;













lab Arena::Skip;
