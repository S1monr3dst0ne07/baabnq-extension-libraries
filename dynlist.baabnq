
use 'libs/stack.baabnq';
use 'libs/math.baabnq';
use 'libs/chunk.baabnq';


"list structure
" _p+0 -> size      :: Int
" _p+1 -> container :: Chunk

"capacity is stored by container, because it's a chunk

put _DynList::List::SIZE       = 0;
put _DynList::List::CONTAINER  = 1;







jump DynList::Skip;


"=> (::DynList)
lab DynList::Allocate;    
    new 2 _pList;

    push _pList;
    sub Stack::Swap;
    return;

"(Size::Int, Container::Chunk) => (::DynList)
lab DynList::CreatePopulate;
    sub Stack::Swap; pull _pContainer;
    sub Stack::Swap; pull _size;

    sub DynList::Allocate;
    pull _pList;

    put _size       -> _pList + _DynList::List::SIZE;
    put _pContainer -> _pList + _DynList::List::CONTAINER;

    push _pList;
    sub Stack::Swap;
    return;


"(Container::Chunk) => (::DynList)
lab DynList::CreatePopulateInferSize;
lab DynList::CreateUseChunk;
    sub Stack::Swap;
    pull _pContainer;

    push _pContainer;
    sub Chunk::Len;
    push _pContainer;
    sub DynList::CreatePopulate;

    sub Stack::Swap;
    return;


"=> (::DynList)
lab DynList::CreateEmpty;
lab DynList::Create;
    new 0 _pContainer;

    push _pContainer;
    sub DynList::CreatePopulateInferSize;

    sub Stack::Swap;
    return;



"(::Chunk) => (::DynList)
lab DynList::CreateCopyChunk;
    sub Stack::Swap;

    sub Chunk::Copy;
    sub DynList::CreatePopulateInferSize;
    
    sub Stack::Swap;
    return;


"(::DynList) => (::DynList)
lab DynList::CreateCopyList;
lab DynList::Copy;
    sub Stack::Swap;
    pull _pList;

    push _pList;
    sub DynList::Size;

    push _pList;
    sub DynList::Container;
    sub Chunk::Copy;

    sub DynList::CreatePopulate;

    sub Stack::Swap;
    return;
    







"(::DynList)
lab DynList::Delete;
    sub Stack::Swap;
    pull _pList;

    put _pContainer <- _pList + _DynList::List::CONTAINER;
    free _pContainer;
    free _pList;
    
    return;    





"(::DynList) => (Empty::Bool)
lab DynList::IsEmpty;
    sub Stack::Swap;
    sub DynList::Size;
    pull _size;
    
    jump DynList::IsEmpty::False ~ _size == 0; push 0; lab DynList::IsEmpty::False;
    jump DynList::IsEmpty::True  ~ _size != 0; push 1; lab DynList::IsEmpty::True;
    
    sub Stack::Swap;
    return;


"(::DynList) => (Size::Int)
lab DynList::Size;
    sub Stack::Swap;
    pull _pList;

    put _size <- _pList + _DynList::List::SIZE;

    push _size;
    sub Stack::Swap;
    return;


"(::DynList) => (Container::Chunk)
lab DynList::Container;
lab DynList::Data;
lab DynList::Pointer;
    sub Stack::Swap;
    pull _pList;

    put _pContainer <- _pList + _DynList::List::CONTAINER;

    push _pContainer;
    sub Stack::Swap;
    return;









"(::DynList, Capacity::Int)
lab DynList::ChangeCapacity;
    sub Stack::Swap; pull _capacitiyNew;
    sub Stack::Swap; pull _pList;

    push _pList; sub DynList::Size;      pull _size;
    push _pList; sub DynList::Container; pull _pContainerOld;
    push _pContainerOld; sub Chunk::Len; pull _capacitiyOld;

    "list content must still fit into container
    sub No::Return ~ _capacitiyNew < _size;


    "alloc new container
    new _capacitiyNew _pContainerNew;

    "copy old to new
    push _pContainerOld;
    push _pContainerNew;
    push _capacitiyOld;
    sub String::MemCpy;

    "free old
    free _pContainerOld;

    "inject new container into list
    put _pContainerNew -> _pList + _DynList::List::CONTAINER;

    return;


"(::DynList, Capacity::Int)
lab DynList::Reserve;
    sub Stack::Swap; pull _capacitiyNew;
    sub Stack::Swap; pull _pList;

    push _pList;
    sub DynList::Container;
    sub Chunk::Len;
    pull _capacitiyOld;

    "reserve can only increase the capacity, not however shrink it
    sub No::Return ~ _capacitiyNew <  _capacitiyOld;
    sub No::Return ~ _capacitiyNew == _capacitiyOld;

    push _pList;
    push _capacitiyNew;
    sub DynList::ChangeCapacity;

    return;

    

"(::DynList)
lab DynList::ShrinkToFit;
    sub Stack::Swap;
    pull _pList;

    push _pList;
    push _pList;
    sub DynList::Size;
    sub DynList::ChangeCapacity;

    return;



"(::DynList)
lab DynList::Clear;
    sub Stack::Swap;
    pull _pList;

    put 0 -> _pList + _DynList::List::SIZE;

    push _pList;
    sub DynList::Container;
    push 0;
    sub Chunk::Fill;

    return;




"(::DynList)
"increments size of dynlist object,
"while ensuring capacity for the new size to fit
lab DynList::LocalIncSizeEnsureCapacity;
    sub Stack::Swap;
    pull _pList;

    "get old size and calculate new one
    push _pList;
    sub DynList::Size;
    pull _sizeOld;
    put  _sizeNew = _sizeOld + 1;

   "update size
    put _sizeNew -> _pList + _DynList::List::SIZE;

    "ensure capacity
    push _pList;
    push _sizeNew;
    sub DynList::Reserve;

    return;


"(::DynList)
"decrements size of dynlist object,
"while checking bounds and cause caller to return on fail
lab DynList::DecSizeBoundsCheckMetaReturnOnFail;
    sub Stack::Swap;
    pull _pList;

    push _pList;
    sub DynList::Size;
    pull _sizeOld;
    put  _sizeNew = _sizeOld - 1;
    
    pull __; "remove rt address to act as caller
    sub No::Return ~ _sizeOld == 0;
    push __; "restore rt address to continue as callee

    put _sizeNew -> _pList + _DynList::List::SIZE;
    return;




"(::DynList, X::Int)
lab DynList::PushBack;
    sub Stack::Swap; pull _x;
    sub Stack::Swap; pull _pList;

    push _pList;
    sub DynList::LocalIncSizeEnsureCapacity;

    "actual push
    push _pList;
    sub DynList::Container; 
    pull _pContainer;
    
    put _x -> _pContainer + _sizeOld;

    return;
    

"(::DynList) => (X::Int)
lab DynList::PopBack;
    sub Stack::Swap;
    pull _pList;

    push 0;
    sub Stack::Swap;
        push _pList;
        sub DynList::DecSizeBoundsCheckMetaReturnOnFail;
    sub Stack::Swap;
    pull __;

    push _pList;
    sub DynList::Container;
    pull _pContainer;

    put _x <- _pContainer + _sizeNew;
    push _x;
    sub Stack::Swap;
    return;



"(::DynList, Pos::Int, X::Int)
lab DynList::Insert;
    sub Stack::Swap; pull _x;
    sub Stack::Swap; pull _pos;
    sub Stack::Swap; pull _pList;

    push _pList;
    sub DynList::LocalIncSizeEnsureCapacity;

    push _pList;
    sub DynList::Size;
    pull _size;

    sub No::Return ~ _pos > _size;



    push _pList;
    sub DynList::Container;
    pull _pContainer;


    put _i = _sizeOld;
    lab DynList::Insert::Loop;
        put _data <- _pContainer + _i - 1;
        put _data -> _pContainer + _i;

        put _i = _i - 1;
    jump DynList::Insert::Loop ~ _i > _pos;

    put _x -> _pContainer + _pos;

    return;


"(::DynList, Pos::Int)
lab DynList::Erase;
    sub Stack::Swap; pull _pos;
    sub Stack::Swap; pull _pList;

    push _pList;
    sub DynList::DecSizeBoundsCheckMetaReturnOnFail;

    push _pList;
    sub DynList::Container;
    pull _pContainer;


    put _i = _pos;
    lab DynList::Erase::Loop;
        jump DynList::Erase::Done ~ _i >  _sizeNew;
        jump DynList::Erase::Done ~ _i == _sizeNew;
        put _data <- _pContainer + _i + 1;
        put _data -> _pContainer + _i;

        put _i = _i + 1;
        jump DynList::Erase::Loop;
    lab DynList::Erase::Done;

    return;






lab DynList::Skip;



